name: Cross-Platform Build

on:
  push:
    branches: [ main, develop/* ]
  pull_request:
    branches: [ main, develop/* ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install glslangValidator (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install glslang

      - name: Install glslangValidator (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y glslang-tools

      - name: Install glslangValidator (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          winget install --id=KhronosGroup.VulkanSDK -e --accept-source-agreements --accept-package-agreements
          $sdkRoot = Get-ChildItem 'C:\VulkanSDK' | Sort-Object Name -Descending | Select-Object -First 1
          echo "VulkanSDK path: $($sdkRoot.FullName)"
          echo "$($sdkRoot.FullName)\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell

      - name: Set up CMake
        uses: lukka/get-cmake@v3.27.0

      - name: Set up dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        # https://github.com/libsdl-org/SDL/blob/main/docs/README-linux.md
        # gcovr for code coverage
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git make \
          pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
          libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev \
          libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev \
          libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
          libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev \
          gcovr

      - name: Configure CMake (Ninja)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir build
          cd build
          cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=ON
          
      - name: Configure CMake (Visual Studio)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 .. -DCMAKE_BUILD_TYPE=Debug

      - name: Build
        run: |
          cd build
          cmake --build . --config Debug

      - name: Run Tests (ctest)
        run: |
          cd build/internal/keel
          ctest -C Debug -V

      - name: Generate coverage report (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd build
          gcovr -r .. --exclude 'test/' --xml -o coverage.xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          files: build/coverage.xml