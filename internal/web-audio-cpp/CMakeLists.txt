cmake_minimum_required(VERSION 3.20)
project(web-audio-cpp LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

add_library(web-audio-cpp INTERFACE)
target_include_directories(web-audio-cpp INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/include")

include(FetchContent)

# GTest
FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG v1.17.0
)
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(googletest)

enable_testing()

set(WEB_AUDIO_TEST_SRC
# include test/**/*.cc
  test/impl.cc
  test/test_audio_buffer.cc
  test/test_audio_node.cc
  test/test_audio_param.cc
  test/test_delay_node.cc
  test/test_message_queue.cc
  test/test_offline_audio_context.cc
  test/test_periodic_wave.cc
  test/test_render_quantum.cc
# end
)
add_executable(test_web_audio ${WEB_AUDIO_TEST_SRC})
target_link_libraries(test_web_audio PRIVATE web-audio-cpp GTest::gtest_main)
add_test(NAME test_web_audio COMMAND test_web_audio)

# https://github.com/codecov/example-cpp11-cmake/blob/master/CMakeLists.txt
add_library(web_audio_coverage_config INTERFACE)

option(CODE_COVERAGE "Enable coverage reporting" OFF)
if(CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
  # Add required flags (GCC & LLVM/Clang)
  target_compile_options(web_audio_coverage_config INTERFACE
    -O0        # no optimization
    -g         # generate debug info
    --coverage # sets all required flags
  )
  if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
    target_link_options(web_audio_coverage_config INTERFACE --coverage)
  else()
    target_link_libraries(web_audio_coverage_config INTERFACE --coverage)
  endif()
endif(CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")

target_compile_definitions(test_web_audio PRIVATE WEB_AUDIO_TEST)
target_link_libraries(test_web_audio PRIVATE web_audio_coverage_config)